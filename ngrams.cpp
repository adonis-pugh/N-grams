/* N-GRAMS!
   Author: Adonis Pugh

 -----------------------------------------
   This program implements an algorithm for generating a map of word linkers to weigh
   probabilities of certain words following a combination of words. After the map is
   made, a stream of random text--designed to mimic the style of the original--is generated
   based on the contents of the map. The size of the base phrase the program considers
   can be modified, reflecting differences in realism and resemblance to the original text.
   The size of the random word stream can be modified as well to be any amount of words. */

/*****************************************
 *              LIBRARIES                *
 ****************************************/

#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <string>
#include "console.h"
#include "map.h"
#include "set.h"
#include "random.h"
#include "simpio.h"
#include "filelib.h"
#include "strlib.h"
using namespace std;

/****************************************
 *         PROTOTYPE FUNCTIONS          *
 ***************************************/

void intro();
void promptInfo(string& filename, int& n);
void generateMap(Map<Vector<string>, Vector<string>>& wordMap, string& filename, int& n);
void generateText(Map<Vector<string>, Vector<string>>& wordMap, int& numWords, int& n);
void startWindow(ifstream& input, int& n, string& word, Vector<string>& bundle,
                 Vector<string>& wrap, Map<Vector<string>, Vector<string>>& wordMap);
void mainMap(ifstream& input, string& word, string& lastWord, Vector<string> bundle,
             Map<Vector<string>, Vector<string>>& wordMap);
void wrapMap(string lastWord, Vector<string> bundle, Vector<string> wrap,
             Map<Vector<string>, Vector<string>>& wordMap);
bool quit(int& numWords, int& n);


/****************************************
 *              FUNCTIONS               *
 ***************************************/

int main() {

    int n;
    int numWords;
    string filename;
    Vector<string> story;
    Map<Vector<string>, Vector<string>> wordMap;

    intro();
    promptInfo(filename, n);
    generateMap(wordMap, filename, n);
    generateText(wordMap, numWords, n);

    cout << "Exiting." << endl;
    return 0;
}

/* The introductory remarks for the program are printed to the screen at the start
 * of the program. */
void intro() {
    cout << "Welcome to CS106B/X Random Writer ('N-Grams')!" << endl;
    cout << "This program generates random text based on a document." << endl;
    cout << "Give me an input file and an 'N' value for your groups" << endl;
    cout << "of words, and I'll create random text for you." << endl;
    cout << endl;
}

/* The user is prompted to enter a file name and a value of N for the algorithm to
 * consider when constructing the word linker map. */
void promptInfo(string& filename, int& n) {
    filename = promptUserForFile("Input file name? ",
                                 "Invalid file name. Try again.");
    n = getInteger("Value of N? ");
    while(n < 2) {
        n = getInteger("Value of N must be 2 or greater. Try again.\n"
                       "Value of N? ");
    }
    cout << endl;
}

/* This function carries out the creation of the word linkage map based on the user input file. */
void generateMap(Map<Vector<string>, Vector<string>>& wordMap, string& filename, int& n) {
    ifstream input;
    input.open(filename);
    string word;
    string lastWord;
    Vector<string> bundle;
    Vector<string> wrap;
    startWindow(input, n, word, bundle, wrap, wordMap);
    mainMap(input, word, lastWord, bundle, wordMap);
    input.close();
    wrapMap(lastWord, bundle, wrap, wordMap);
}

/* The initial bundle of words (window) is created based on the value of N. */
void startWindow(ifstream& input, int& n, string& word, Vector<string>& bundle,
                 Vector<string>& wrap, Map<Vector<string>, Vector<string>>& wordMap) {
    for(int i = 0; i < n; i++) {
        if(input >> word && i != n - 1) {
            bundle.add(word);
            wrap.add(word);
        } else {
            wordMap[bundle] = Vector<string> {word};
        }
    }
}

/* The main segment of the word map is generated by continually shifting the window of
 * words the program is considering to associate collections of words with other words
 * in the word linkage map. */
void mainMap(ifstream& input, string& word, string& lastWord, Vector<string> bundle,
             Map<Vector<string>, Vector<string>>& wordMap) {
    lastWord = word;
    while(input >> word) {
        bundle.remove(0);
        bundle.add(lastWord);
        if(wordMap.containsKey(bundle)) {
            wordMap[bundle] += word;
        } else {
            wordMap[bundle] = Vector<string> {word};
        }
        lastWord = word;
    }
}

/* The final segment of the word map is created by associating the words at the end of the
 * input file with the words at the beginning of the input file in the same frame shifting
 * manner as the previous method. This step ensures all possible word combinations in the
 * text have associated words in the word linkage map. */
void wrapMap(string lastWord, Vector<string> bundle, Vector<string> wrap,
             Map<Vector<string>, Vector<string>>& wordMap) {
    for(int i = 0; i < wrap.size(); i++) {
        bundle.remove(0);
        bundle.add(lastWord);
        if(wordMap.containsKey(bundle)) {
            wordMap[bundle] += wrap[i];
        } else {
            wordMap[bundle] = Vector<string> {wrap[i]};
        }
        lastWord = wrap[i];
    }
}

/* A stream of random text is printed to the screen based on the word linker map and its
 * associated probabilities of linkage to certain words. */
void generateText(Map<Vector<string>, Vector<string>>& wordMap, int& numWords, int& n) {
    while(!quit(numWords, n)) {
        Vector<Vector<string>> allKeys = wordMap.keys();
        Vector<string> random = allKeys[randomInteger(0, allKeys.size())];
        cout << "... ";
        for(int i = 0; i < random.size(); i++) {
            cout << " " << random[i];
        }
        for(int i = 0; i < numWords - n + 1; i++) {
            string suffix = (wordMap[random])[randomInteger(0, wordMap[random].size() - 1)];
            cout <<  " " << suffix;
            if(i == numWords - n) {
                cout << " ..." << endl;
            }
            random.remove(0);
            random.add(suffix);
        }
        cout << endl;
    }
}

/* The program is over when the user inputs 0 to the program. Furthermore, the user is reprompted
 * to enter a valid value of words to generate if the value entered is not an integer or is less
 * than the current value of N. */
bool quit(int& numWords, int& n) {
    numWords = getInteger("# of random words to generate (0 to quit)? ");
    while(numWords < n && numWords != 0) {
        numWords = getInteger("Must be an integer of value " + integerToString(n) + " or greater."
                              "\n# of random words to generate (0 to quit)?  ");
    }
    return numWords == 0;
}
